# Gitの内部実装完全ガイド：.gitディレクトリとワークツリーの仕組み

## Gitの3つの領域

Gitは以下の3つの領域でファイルを管理しています：

```
ワークツリー        ステージング         ローカルリポジトリ      リモートリポジトリ
(作業ディレクトリ)   (インデックス)       (.git/objects/)        (GitHub等)
     |                  |                      |                      |
  編集中            git add              git commit            git push
     |        ─────────→  |        ──────────→  |        ──────────→  |
     |                  |                      |                      |
  index.html       index.html            commit object          commit object
  style.css        style.css             tree object            tree object
  app.js           app.js                blob object            blob object
```

## .gitディレクトリの構造

```bash
.git/
├── HEAD                    # 現在のブランチを指すポインタ
├── config                  # リポジトリの設定
├── description             # GitWebで使用される説明
├── hooks/                  # イベントフック用スクリプト
├── info/                   # 除外ファイルの情報
│   └── exclude
├── objects/                # すべてのコンテンツを格納（最重要）
│   ├── 00/
│   ├── 01/
│   ├── ...
│   ├── ff/
│   ├── info/
│   └── pack/               # パック化されたオブジェクト
├── refs/                   # ブランチとタグの参照
│   ├── heads/              # ローカルブランチ
│   │   ├── main
│   │   └── develop
│   ├── remotes/            # リモート追跡ブランチ
│   │   └── origin/
│   │       ├── main
│   │       └── develop
│   └── tags/               # タグ
├── index                   # ステージングエリア（バイナリファイル）
└── logs/                   # 参照の変更履歴
    ├── HEAD
    └── refs/
```

## Gitの4つのオブジェクト

Gitはすべてのデータを`.git/objects/`ディレクトリに4種類のオブジェクトとして保存します。

### 1. Blobオブジェクト（ファイルの内容）

```bash
# ファイルの内容がそのまま保存される
# ファイル名は保存されない（内容のみ）

例：index.html の内容
<html>
  <body>Hello World</body>
</html>

# SHA-1ハッシュで識別
# 保存場所：.git/objects/2c/26b46b68ffc68ff99b453c1d30413413422d706
```

### 2. Treeオブジェクト（ディレクトリ構造）

```bash
# ディレクトリ構造とファイル名を保存
# Unixのディレクトリのような役割

Tree内容の例：
100644 blob 2c26b46... index.html
100644 blob 5f3d2a1... style.css
040000 tree 8a7f3c2... src/

# treeは以下を記録：
# - ファイルモード（パーミッション）
# - オブジェクトタイプ（blob or tree）
# - SHA-1ハッシュ
# - ファイル名/ディレクトリ名
```

### 3. Commitオブジェクト（コミット情報）

```bash
# コミットのメタデータを保存

Commit内容の例：
tree 8a7f3c2abc...           # ルートtreeへの参照
parent d2e4f6a789...         # 親コミット（最初のコミットは無し）
author Taro Yamada <taro@example.com> 1729584000 +0900
committer Taro Yamada <taro@example.com> 1729584000 +0900

Initial commit                # コミットメッセージ

# commitは以下を記録：
# - ルートtreeオブジェクトへの参照
# - 親コミット（1つ以上、マージの場合は2つ以上）
# - 作成者情報（author）
# - コミット者情報（committer）
# - コミットメッセージ
```

### 4. Tagオブジェクト（注釈付きタグ）

```bash
# タグの情報を保存（アノテートタグの場合）

Tag内容の例：
object 9a3b5c7def...         # commitへの参照
type commit
tag v1.0.0
tagger Taro Yamada <taro@example.com> 1729584000 +0900

Release version 1.0.0        # タグメッセージ
```

## SHA-1ハッシュの仕組み

```bash
# Gitはすべてのオブジェクトを内容からSHA-1ハッシュで識別

例：ファイル "Hello World\n" の場合

1. ヘッダー追加
   "blob 12\0Hello World\n"
   
2. SHA-1ハッシュ計算
   557db03de997c86a4a028e1ebd3a1ceb225be238
   
3. 最初の2文字でディレクトリ、残りでファイル名
   .git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238

4. zlibで圧縮して保存
```

## ワークツリーからリポジトリへ：内部の流れ

### 初期状態

```
ワークツリー（作業ディレクトリ）
├── index.html     ← 新規作成
├── style.css      ← 新規作成
└── app.js         ← 新規作成

.git/
├── objects/       ← まだ空
└── index          ← まだ空
```

### git add の内部動作

```bash
$ git add index.html style.css app.js
```

**内部で何が起きているか：**

```
1. ファイルの内容を読み込む

2. 各ファイルのBlobオブジェクトを作成
   - index.html の内容 → SHA-1計算 → 2c26b46...
   - style.css の内容  → SHA-1計算 → 5f3d2a1...
   - app.js の内容     → SHA-1計算 → 7a8e9b2...

3. .git/objects/ に保存（圧縮）
   .git/objects/2c/26b46b68ffc68ff99b453c1d30413413422d706
   .git/objects/5f/3d2a1e8c7f9a0b5e6d4c3b2a1f0e9d8c7b6a5f4
   .git/objects/7a/8e9b2c5d3f1a0e9b8c7d6e5f4a3b2c1d0e9f8a7

4. .git/index（ステージングエリア）を更新
   index.html  2c26b46...
   style.css   5f3d2a1...
   app.js      7a8e9b2...
```

**ステージング後の状態：**

```
ワークツリー
├── index.html
├── style.css
└── app.js

ステージングエリア（.git/index）
├── index.html → 2c26b46...
├── style.css  → 5f3d2a1...
└── app.js     → 7a8e9b2...

.git/objects/
├── 2c/26b46... (blob: index.html の内容)
├── 5f/3d2a1... (blob: style.css の内容)
└── 7a/8e9b2... (blob: app.js の内容)
```

### git commit の内部動作

```bash
$ git commit -m "Initial commit"
```

**内部で何が起きているか：**

```
1. ステージングエリア（.git/index）からTreeオブジェクトを作成
   Tree内容：
   100644 blob 2c26b46... index.html
   100644 blob 5f3d2a1... style.css
   100644 blob 7a8e9b2... app.js
   
   → SHA-1計算 → 8a7f3c2...

2. Treeオブジェクトを .git/objects/ に保存
   .git/objects/8a/7f3c2abc...

3. Commitオブジェクトを作成
   tree 8a7f3c2abc...
   author Taro Yamada <taro@example.com> 1729584000 +0900
   committer Taro Yamada <taro@example.com> 1729584000 +0900
   
   Initial commit
   
   → SHA-1計算 → d2e4f6a...

4. Commitオブジェクトを .git/objects/ に保存
   .git/objects/d2/e4f6a789...

5. ブランチ（HEAD）を更新
   .git/refs/heads/main → d2e4f6a789...
   .git/HEAD → ref: refs/heads/main
```

**コミット後の状態：**

```
.git/objects/
├── 2c/26b46... (blob: index.html)
├── 5f/3d2a1... (blob: style.css)
├── 7a/8e9b2... (blob: app.js)
├── 8a/7f3c2... (tree: ルートディレクトリ)
└── d2/e4f6a... (commit: Initial commit)

.git/refs/heads/main
d2e4f6a789...

.git/HEAD
ref: refs/heads/main
```

### git push の内部動作

```bash
$ git push origin main
```

**内部で何が起きているか：**

```
1. リモートリポジトリとの通信開始
   - SSHまたはHTTPSプロトコル使用
   
2. リモートの状態確認
   - リモートの refs/heads/main が指すコミットを確認
   - ローカルの refs/heads/main と比較

3. 差分の計算
   - リモートにないオブジェクトを特定
   - 必要なcommit, tree, blobオブジェクトをリスト化

4. オブジェクトの送信
   - パックファイル形式に圧縮
   - リモートに送信
   
   送信内容：
   - d2e4f6a... (commit)
   - 8a7f3c2... (tree)
   - 2c26b46... (blob: index.html)
   - 5f3d2a1... (blob: style.css)
   - 7a8e9b2... (blob: app.js)

5. リモートの参照を更新
   - refs/heads/main を d2e4f6a... に更新

6. ローカルのリモート追跡ブランチを更新
   - refs/remotes/origin/main → d2e4f6a...
```

**プッシュ後の状態：**

```
ローカル：
.git/refs/heads/main              → d2e4f6a...
.git/refs/remotes/origin/main     → d2e4f6a...

リモート（GitHub等）：
refs/heads/main                   → d2e4f6a...
objects/
├── 2c/26b46... (blob)
├── 5f/3d2a1... (blob)
├── 7a/8e9b2... (blob)
├── 8a/7f3c2... (tree)
└── d2/e4f6a... (commit)
```

## HEADとブランチの仕組み

### HEADとは

```bash
# HEADは「今いる場所」を指すポインタ

.git/HEAD の内容：
ref: refs/heads/main

# mainブランチを指している
```

### ブランチとは

```bash
# ブランチは単なるコミットへのポインタ（40文字のSHA-1ハッシュ）

.git/refs/heads/main の内容：
d2e4f6a789abc123def456...

# このコミットがmainブランチの先頭
```

### ブランチの切り替え

```bash
$ git checkout develop

内部動作：
1. .git/HEAD を書き換え
   ref: refs/heads/main → ref: refs/heads/develop

2. .git/refs/heads/develop が指すcommitを読み込み

3. そのcommitのtreeオブジェクトを読み込み

4. treeからすべてのblobを展開してワークツリーを更新
```

## ステージングエリア（index）の詳細

```bash
# .git/index はバイナリファイル

内容の構造：
┌─────────────────────────────────────┐
│ ヘッダー（シグネチャ、バージョン）    │
├─────────────────────────────────────┤
│ エントリ1                            │
│  - ファイルパス: index.html          │
│  - SHA-1: 2c26b46...                 │
│  - モード: 100644                    │
│  - サイズ: 45 bytes                  │
│  - タイムスタンプ                    │
├─────────────────────────────────────┤
│ エントリ2                            │
│  - ファイルパス: style.css           │
│  - SHA-1: 5f3d2a1...                 │
│  ...                                 │
├─────────────────────────────────────┤
│ エントリ3                            │
│  ...                                 │
└─────────────────────────────────────┘

# 確認コマンド
git ls-files --stage
```

## 2回目以降のコミット

```bash
# ファイルを編集
$ echo "Updated content" >> index.html

# 変更をステージング
$ git add index.html
```

**内部動作：**

```
1. 新しい内容でBlobオブジェクトを作成
   → 新しいSHA-1ハッシュ: 9f8a7b6...

2. .git/objects/9f/8a7b6... に保存

3. .git/index を更新
   index.html  2c26b46... → 9f8a7b6...
```

```bash
# コミット
$ git commit -m "Update index.html"
```

**内部動作：**

```
1. 新しいTreeオブジェクトを作成
   100644 blob 9f8a7b6... index.html  ← 更新
   100644 blob 5f3d2a1... style.css
   100644 blob 7a8e9b2... app.js
   → SHA-1: 3e5d2f1...

2. 新しいCommitオブジェクトを作成
   tree 3e5d2f1...
   parent d2e4f6a...  ← 前のコミットを指す
   author Taro Yamada <taro@example.com> 1729584100 +0900
   committer Taro Yamada <taro@example.com> 1729584100 +0900
   
   Update index.html
   → SHA-1: a1b2c3d...

3. ブランチを更新
   .git/refs/heads/main  d2e4f6a... → a1b2c3d...
```

**コミット履歴の構造：**

```
a1b2c3d (HEAD -> main) Update index.html
   ↓ parent
d2e4f6a Initial commit
```

## パックファイルの最適化

```bash
# 時間が経つと、Gitはオブジェクトをパック化して容量を節約

通常のオブジェクト：
.git/objects/2c/26b46...
.git/objects/5f/3d2a1...
.git/objects/7a/8e9b2...
... (個別に保存)

パック化後：
.git/objects/pack/pack-abc123.pack  ← 複数オブジェクトを圧縮
.git/objects/pack/pack-abc123.idx   ← インデックス

# 手動でパック化
git gc

# パックファイルの確認
git verify-pack -v .git/objects/pack/pack-*.idx
```

## 実践：内部を覗いてみる

```bash
# 1. オブジェクトの一覧
find .git/objects -type f

# 2. オブジェクトのタイプ確認
git cat-file -t d2e4f6a
# commit

# 3. オブジェクトの内容表示
git cat-file -p d2e4f6a
# tree 8a7f3c2abc...
# author Taro Yamada <taro@example.com> 1729584000 +0900
# ...

# 4. Treeオブジェクトの内容
git cat-file -p 8a7f3c2
# 100644 blob 2c26b46... index.html
# 100644 blob 5f3d2a1... style.css
# 100644 blob 7a8e9b2... app.js

# 5. Blobオブジェクトの内容
git cat-file -p 2c26b46
# <html>
#   <body>Hello World</body>
# </html>

# 6. ステージングエリアの確認
git ls-files --stage
# 100644 2c26b46... 0	index.html
# 100644 5f3d2a1... 0	style.css
# 100644 7a8e9b2... 0	app.js

# 7. HEADの確認
cat .git/HEAD
# ref: refs/heads/main

cat .git/refs/heads/main
# d2e4f6a789abc123...
```

## まとめ：全体の流れ

```
【ワークツリー】ファイル編集
      ↓
    git add
      ↓
【ステージング】.git/index + .git/objects/（blob作成）
      ↓
   git commit
      ↓
【ローカルリポジトリ】.git/objects/（tree + commit作成）
                     .git/refs/heads/（ブランチ更新）
      ↓
   git push
      ↓
【リモートリポジトリ】オブジェクト送信 + refs更新
```

## Git内部用語まとめ

| 用語 | 説明 | 保存場所 |
|------|------|----------|
| **Blob** | ファイルの内容 | `.git/objects/` |
| **Tree** | ディレクトリ構造 | `.git/objects/` |
| **Commit** | コミット情報 | `.git/objects/` |
| **HEAD** | 現在位置のポインタ | `.git/HEAD` |
| **ブランチ** | コミットへの参照 | `.git/refs/heads/` |
| **Index** | ステージングエリア | `.git/index` |
| **ワークツリー** | 作業ディレクトリ | `.git`以外のすべて |
| **SHA-1** | オブジェクトの識別子 | 40文字のハッシュ |

Gitは一見複雑ですが、内部では非常にシンプルな仕組みで動いています！
